@page "/Modelos/Index"
@inject ModelosService modelosService

@rendermode InteractiveServer

<PageTitle>Index</PageTitle>
<div class="container mb-4">
    <div class="card">
        <div class="row" style="background-color:white; padding:10px; margin:10px;">
            <div class="col">
                <div class="text-left">
                    <h2 class="text-black">Modelos</h2>
                </div>
            </div>
            <div class="col text-end">
                <a href="/Modelos/Create" class="btn btn-secondary"><i class="bi bi-plus-lg"></i> Nuevo Modelo</a>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="card">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-4">
                    <div class="input-group">
                        <div class="form-floating">
                            <InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
                                <option value="" selected disabled>--- Selecciona ---</option>
                                <option value="id">ID Modelo</option>
                                <option value="fecha">Fecha</option>
                                <option value="campo">Campo</option>
                            </InputSelect>
                            <label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
                        </div>

                        @*btn restablecer*@
                        <button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="() => Restablecer()"></button>
                    </div>
                </div>

                @*Btn Buscar*@
                <div class="col">
                    <div class="input-group" style="width: 400px">
                        @*textbox buscar*@
                        <div class="form-floating d-flex align-items-center">
                            <InputText @bind-Value="@searchBarValue" class="form-control" placeholder="" id="floatingSearch" />
                            <label for="floatingSearch">Buscar</label>
                        </div>
                        <button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
                    </div>
                </div>
            </div>

            @if (valorFiltro == "fecha")
            {
                <div class="row mb-3">
                    <div class="col">
                        <div class="form-floating">
                            <InputDate id="desde" class="form-control" @bind-Value=Desde></InputDate>
                            <label for="desde"><strong>Fecha Inicial</strong></label>
                        </div>
                    </div>

                    <div class="col">
                        <div class="form-floating">
                            <InputDate id="hasta" class="form-control" @bind-Value=Hasta></InputDate>
                            <label for="hasta"><strong>Fecha Final</strong></label>
                        </div>
                    </div>
                </div>
            }

            <table class="table table-sm table-bordered table-hover">
                <thead class="table table-striped ">
                    <tr>
                        <th>ID</th>
                        <th>Campo</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var modelo in ListaModelos)
                    {
                        <tr>
                            <td>@modelo.ModeloId</td>
                            <td>@modelo.EsteCampoPuedeVariar</td>
                            <td>
                                <a href="/Modelos/Edit/@modelo.ModeloId" class="btn btn-sm btn-outline-info bi bi-pencil-square"></a>
                                <a href="/Modelos/Delete/@modelo.ModeloId" class="btn btn-sm btn-outline-danger bi bi-trash3"></a>
                            </td>
                        </tr>
                    }
                </tbody>
                <caption>Cant. de Modelos: @ListaModelos.Count</caption>
            </table>
        </div>
    </div>
</div>

@code {
    [Inject] protected ToastService ToastService { get; set; }
    public string searchBarValue { get; set; } = string.Empty;
    public string valorFiltro { get; set; } = string.Empty;
    public DateTime? Desde { get; set; } = null;
    public DateTime? Hasta { get; set; } = null;
    public List<Modelos> ListaModelos { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        ListaModelos = await modelosService.Listar(C => true);
    }

    // Filtro de busqueda
    public async Task Buscar()
    {
        if (string.IsNullOrEmpty(valorFiltro))
        {
            ToastService.Notify(new(ToastType.Warning, "Aviso", "Seleccione una opcion en el filtro."));
            ListaModelos = await modelosService.Listar(x => true);
            return;
        }

        searchBarValue.Trim().ToLower();

        switch (valorFiltro)
        {
            case "id":
                if (string.IsNullOrEmpty(searchBarValue))
                {
                    ToastService.Notify(new(ToastType.Warning, "Aviso", "Debe proveer un ID de pago para buscar."));
                    return;
                }
                if (!searchBarValue.All(char.IsDigit))
                {
                    ToastService.Notify(new(ToastType.Warning, "Aviso", "El criterio de busqueda solo puede alojar numeros."));
                    return;
                }
                ListaModelos = await modelosService.Listar(lt => lt.ModeloId.ToString().Contains(searchBarValue));
                break;

            case "campo":
                if (string.IsNullOrEmpty(searchBarValue))
                {
                    ToastService.Notify(new(ToastType.Warning, "Aviso", "Debe proveer un ID de una CxC para buscar."));
                    return;
                }
                if (!searchBarValue.All(char.IsDigit))
                {
                    ToastService.Notify(new(ToastType.Warning, "Aviso", "El criterio de busqueda solo puede alojar numeros."));
                    return;
                }
                // ListaModelos = await modelosService.Listar(lt => lt.CXCId.ToString().Contains(searchBarValue));
                break;

            case "fecha":
                if (Desde == null || Hasta == null)
                {
                    ToastService.Notify(new(ToastType.Warning, "Aviso", "Seleccione una fecha en ambos campos."));
                    return;
                }
                if (Desde > Hasta)
                {
                    ToastService.Notify(new(ToastType.Warning, "Aviso", "La fecha inicial no puede ser mayor a la final."));
                    return;
                }
                // ListaModelos = await modelosService.Listar(x => x.FechaPago >= Desde && x.FechaPago <= Hasta);
                break;

            default:
                ListaModelos = await modelosService.Listar(x => true);
                break;
        }
    }

    public async Task Restablecer()
    {
        ListaModelos = await modelosService.Listar(x => true);
        searchBarValue = string.Empty;
        valorFiltro = string.Empty;
        Desde = null;
        Hasta = null;

        ToastService.Notify(new(ToastType.Info, "Aviso", "Se han restablecido todos los criterios de busqueda."));
    }
}