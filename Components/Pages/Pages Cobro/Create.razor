@page "/Modelos/Create"

@inject ModelosService modelosService
@inject ArticulosService articulosService
@inject NavigationManager navigation

<PageTitle>Create</PageTitle>
<div class="container mb-4">
	<div class="card">
		<div class="row" style="background-color:white; padding:10px; margin:10px;">
			<div class="col">
				<div class="text-left">
					<h2 class="text-black">Nuevo Modelo</h2>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="container">
	<div class="card">
		<div class="card-body">
			<EditForm Model="Modelo" OnValidSubmit="Guardar">
				<div class="row mb-3">
					<div class="col">
						<label><strong>ID</strong></label>
						<InputNumber class="form-control" @bind-Value="Modelo.ModeloId" readonly disabled placeholder="Campo"></InputNumber>
					</div>
					<div class="col">
						<label><strong>Campo</strong></label>
						<InputText class="form-control" @bind-Value="Modelo.EsteCampoPuedeVariar" placeholder="Campo"></InputText>
					</div>
					<div class="col">
						<label><strong>Campo</strong></label>
						<InputText class="form-control" readonly disabled @bind-Value="Modelo.EsteCampoPuedeVariar"></InputText>
					</div>
				</div>

				<div class="container mb-3">
					<div class="border border-success p-3 mt-3">
						<div>
							<span>Detalles de articulos</span>
						</div>

						<div class="mb-4">
							<SelectArticulos ArticuloId="ModeloDetalle.ArticuloId"
							Cantidad="ModeloDetalle.Cantidad"
							Precio="ModeloDetalle.Precio"
							ArticuloSeleccionado="Agregar"
							ListaArticulos="@ListaArticulos"
							Detalle="ModeloDetalle" />
						</div>

						<table class="table table-sm table-hover table-bordered">
							<thead>
								<tr>
									<th>ID</th>
									<th>Articulo</th>
									<th>Cantidad</th>
									<th>Precio</th>
									<th>Total</th>
									<th>Remover</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var detalle in Modelo.Detalle)
								{
									var articulo = ListaArticulos.SingleOrDefault(a => a.ArticuloId == detalle.ArticuloId);
									var subtotal = articulo?.Precio * detalle.Cantidad; @*<----CALCULO EN LA UI*@
									<tr>
										<td>@articulo?.ArticuloId</td>
										<td>@articulo?.Nombre</td>
										<td>@detalle.Cantidad</td>
										<td>@articulo?.Precio.ToString("N2")</td>
										<td>@subtotal</td>
										<td>
											<button type="button" class="btn btn-sm btn-outline-danger bi bi-trash3" @onclick="(() => RemoverDetalle(detalle))"></button>
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
				</div>

				<div class="text-center">
					<button class="btn btn-success bi bi-floppy">   Guardar</button>
					<a href="/Modelos/Index" class="btn btn-secondary bi bi-arrow-left-circle">   Volver</a>
				</div>
			</EditForm>
		</div>
	</div>
</div>

@code {
	[Inject]
	protected ToastService ToastService { get; set; }
	public Modelos Modelo { get; set; } = new();
	public ModelosDetalle ModeloDetalle { get; set; } = new();
	public List<Articulos> ListaArticulos { get; set; } = new();
	public double Total { get; set; } = 0;

	protected override async Task OnInitializedAsync()
	{
		ListaArticulos = await articulosService.Listar(x => true);
	}

	public async Task Guardar()
	{
		if (Modelo.EsteCampoPuedeVariar == null)
		{
			ToastService.Notify(new(ToastType.Danger, "Error", $"Complete el campo"));
			return;
		}

		if (Modelo.Detalle.Count < 1)
		{
			ToastService.Notify(new(ToastType.Danger, "Aviso", $"El detalle debe contener minimo 1 articulo."));
			return;
		}

		await modelosService.Guardar(Modelo);
		ToastService.Notify(new(ToastType.Success, "Exito", $"Modelo registrado correctamente."));
		navigation.NavigateTo("/Modelos/Index");
	}

	public async Task Agregar((Articulos articulos, int cantidad) seleccion)
	{
		if (seleccion.cantidad > seleccion.articulos.Existencia)
		{
			ToastService.Notify(new(ToastType.Warning, "Exito", $"La cantidad pedida del articulo no puede ser mayor a la existencia del mismo"));
			return;
		}
		var ExisteArticulo = Modelo.Detalle
		.FirstOrDefault(a => a.ArticuloId == seleccion.articulos.ArticuloId);

		if (ExisteArticulo != null)
		{
			ExisteArticulo.Cantidad += seleccion.cantidad;
			ExisteArticulo.Precio = seleccion.articulos.Precio * seleccion.cantidad;
			Total += seleccion.articulos.Precio * seleccion.cantidad;
		}
		else
		{
			var detalle = new ModelosDetalle
				{
					ArticuloId = seleccion.articulos.ArticuloId,
					Cantidad = seleccion.cantidad,
					Precio = seleccion.articulos.Precio * seleccion.cantidad
				};
			Modelo.Detalle.Add(detalle);
			Total += detalle.Precio * seleccion.cantidad;
			await Task.CompletedTask;
		}
	}

	public void RemoverDetalle(ModelosDetalle detalle)
	{
		Total -= detalle.Precio * detalle.Cantidad;
		Modelo.Detalle.Remove(detalle);
		ModeloDetalle.ArticuloId = detalle.ArticuloId;
		ModeloDetalle.Cantidad = detalle.Cantidad;
		ModeloDetalle.Precio = detalle.Precio;
	}
}