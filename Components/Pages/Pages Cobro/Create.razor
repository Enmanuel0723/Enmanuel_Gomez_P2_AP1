@page "/Encuestas/Create"

@inject EncuestasService encuestasService
@inject CiudadesService ciudadesService
@inject NavigationManager navigation

@rendermode InteractiveServer

<PageTitle>Create</PageTitle>
<div class="container mb-4">
    <div class="card">
        <div class="row" style="background-color:white; padding:10px; margin:10px;">
            <div class="col">
                <div class="text-left">
                    <h2 class="text-black">Nueva Encuesta</h2>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container">
    <div class="card">
        <div class="card-body">
            <EditForm Model="Encuesta" OnValidSubmit="Guardar" FormName="EncuestaForm">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label><strong>ID</strong></label>
                    <InputNumber class="form-control" @bind-Value="Encuesta.EncuestaId" readonly disabled placeholder="Encuesta"></InputNumber>
                </div>

                <div class="mb-3">
                    <label><strong>Fecha</strong></label>
                    <InputDate required class="form-control" @bind-Value="Encuesta.Fecha"></InputDate>
                </div>

                <div class="mb-3">
                    <label><strong>Asignatura</strong></label>
                    <InputText required class="form-control" @bind-Value="Encuesta.Asignatura"></InputText>
                </div>

                <div class="container mb-3">
                    <div class="border border-success p-3 mt-3">
                        <div>
                            <span>Detalle</span>
                        </div>

                        <div class="mb-4">
                            <div class="input-group">
                                <InputSelect required class="form-select" @bind-Value="EncuestaDetalle.CiudadId">
                                    <option value="0" disabled selected>--- Seleccione una ciudad ---</option>
                                    @foreach (var ciudad in ListaCiudades)
                                    {
                                        <option value="@ciudad.CiudadId">@ciudad.Nombre</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => EncuestaDetalle.CiudadId)"></ValidationMessage>

                                <label class="col-form-label input-group-text">Monto:</label>
                                <InputNumber required class="form-control" @bind-Value="EncuestaDetalle.Monto"></InputNumber>
                                <ValidationMessage For="@(() => EncuestaDetalle.Monto)"></ValidationMessage>

                                <button type="button" class="btn btn-outline-success bi bi-plus" @onclick="Agregar">Agregar</button>
                            </div>
                        </div>

                        <table class="table table-sm table-hover table-bordered">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Ciudad</th>
                                    <th>Monto</th>
                                    <th>Remover</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var detalle in Encuesta.Detalle)
                                {
                                    var ciudad = ListaCiudades.SingleOrDefault(a => a.CiudadId == detalle.CiudadId);
                                    <tr>
                                        <td>@ciudad?.CiudadId</td>
                                        <td>@ciudad?.Nombre</td>
                                        <td>@detalle.Monto.ToString("N2")</td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-outline-danger bi bi-trash3" @onclick="(() => RemoverDetalle(detalle))"></button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <th></th>
                                    <th></th>
                                    <th>Total</th>
                                    <th></th>
                                </tr>
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td>RD$@Total.ToString("N2")</td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>

                <div class="text-center">
                    <button class="btn btn-success bi bi-floppy">   Guardar</button>
                    <a href="/Encuestas/Index" class="btn btn-secondary bi bi-arrow-left-circle">   Volver</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Inject]
    protected ToastService ToastService { get; set; }
    public Encuestas Encuesta { get; set; } = new();
    public EncuestaDetalle EncuestaDetalle { get; set; } = new();
    public List<Ciudades> ListaCiudades { get; set; } = new();
    public Ciudades Ciudad { get; set; } = new();
    public double Total { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        ListaCiudades = await ciudadesService.Listar(x => true);
    }

    public async Task Guardar()
    {
        if (Encuesta.Asignatura == null)
        {
            ToastService.Notify(new(ToastType.Danger, "Error", $"Rellene el campo asignatura"));
            return;
        }

        if (Encuesta.Detalle.Count < 1)
        {
            ToastService.Notify(new(ToastType.Danger, "Aviso", $"El detalle debe contener minimo 1 monto."));
            return;
        }

        await encuestasService.Guardar(Encuesta);
        ToastService.Notify(new(ToastType.Success, "Exito", $"Encuesta registrada correctamente."));
        navigation.NavigateTo("/Encuestas/Index");
    }

    public void Agregar()
    {
        if (EncuestaDetalle.CiudadId == 0 || EncuestaDetalle.Monto <= 0)
        {
            return;
        }

        Encuesta.Detalle.Add(new EncuestaDetalle
            {
                CiudadId = EncuestaDetalle.CiudadId,
                Monto = EncuestaDetalle.Monto
            });
        Total += EncuestaDetalle.Monto;
        Encuesta.Monto = Total;
    }

    public void RemoverDetalle(EncuestaDetalle detalle)
    {
        Total -= detalle.Monto;
        Encuesta.Monto = Total;
        Encuesta.Detalle.Remove(detalle);
        EncuestaDetalle.CiudadId = detalle.CiudadId;
        EncuestaDetalle.Monto = detalle.Monto;
    }
}